{"ast":null,"code":"var _jsxFileName = \"D:\\\\GIT\\\\1\\u0441-extensions-info\\\\frontend\\\\src\\\\components\\\\AnalysisViewComponent.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { startManualAnalysis } from \"../services/cron\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { getBaseSettings } from \"../services/settingservice\";\nimport { useMutation, useQueryClient } from '@tanstack/react-query';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  useState,\n  useEffect,\n  useRef\n} = React;\nconst analysisLog = [\"Начало анализа базы данных\", \"Подключение к серверу 1С...\", \"Подключение установлено успешно\", \"Выгрузка конфигурации...\", \"Конфигурация выгружена (УТ 11.4.16.242)\", \"Поиск установленных расширений...\", \"Найдено расширений: 3\", \"Анализ расширения: КастомныеДоработки\", \"Найдено переопределенных объектов: 5\", \"Анализ переопределенных процедур и функций...\", \"Найдено переопределенных методов: 6\", \"Анализ завершен успешно\"];\nconst AnalysisView = ({\n  database,\n  onComplete,\n  onCancel\n}) => {\n  _s();\n  const [error, setError] = useState('');\n  const manualAnalysis = useMutation({\n    mutationFn: startManualAnalysis,\n    onError: error => {\n      console.log('ERROR:', error);\n      setError(error);\n    },\n    onSuccess: () => {\n      setError('');\n    }\n  });\n  useEffect(() => {\n    manualAnalysis.mutate();\n  }, []); // [] — чтобы вызвалось только один раз при монтировании\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"empty-state\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"empty-state-icon\",\n        children: \"\\u26D4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\u041F\\u0440\\u043E\\u0438\\u0437\\u043E\\u0448\\u043B\\u0430 \\u043E\\u0448\\u0438\\u0431\\u043A\\u0430\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this);\n  }\n  return null;\n\n  //\n  // const [currentStep, setCurrentStep] = useState(0);\n  // const [logs, setLogs] = useState([]);\n  // const [showLogs, setShowLogs] = useState(false);\n  // const [progress, setProgress] = useState(0);\n  // const logEndRef = useRef(null);\n  // const steps = [\n  //     \"Подключение к серверу 1С...\",\n  //     \"Выгрузка конфигурации...\",\n  //     \"Анализ расширений...\",\n  //     \"Обработка метаданных...\"\n  // ];\n  //\n  //\n  // useEffect(() => {\n  //     console.log(`Начало анализа базы данных: ${database.Name}`);\n  //\n  //     const analysisTimer = setTimeout(() => {\n  //         let logIndex = 0;\n  //         const logInterval = setInterval(() => {\n  //             if (logIndex < analysisLog.length) {\n  //                 setLogs(prev => [...prev, analysisLog[logIndex]]);\n  //                 setProgress(Math.floor((logIndex + 1) / analysisLog.length * 100));\n  //                 logIndex++;\n  //             } else {\n  //                 clearInterval(logInterval);\n  //                 console.log(`Анализ завершен для базы: ${database.Name}`);\n  //                 setTimeout(() => onComplete(database.ID), 1000);\n  //             }\n  //         }, 300);\n  //\n  //         const stepInterval = setInterval(() => {\n  //             setCurrentStep(prev => {\n  //                 if (prev < steps.length - 1) {\n  //                     return prev + 1;\n  //                 } else {\n  //                     clearInterval(stepInterval);\n  //                     return prev;\n  //                 }\n  //             });\n  //         }, 800);\n  //\n  //         return () => {\n  //             clearInterval(logInterval);\n  //             clearInterval(stepInterval);\n  //         };\n  //     }, 500);\n  //\n  //     return () => clearTimeout(analysisTimer);\n  // }, [database.ID]);\n  //\n  // useEffect(() => {\n  //     if (logEndRef.current) {\n  //         logEndRef.current.scrollIntoView({ behavior: 'smooth' });\n  //     }\n  // }, [logs]);\n  //\n  // return (\n  //     <div className=\"analysis-view\">\n  //         <div className=\"analysis-status\">\n  //             <div className=\"spinner\"></div>\n  //             <div className=\"status-text\">Анализ базы: {database.Name}</div>\n  //             <div className=\"substatus-text\">{steps[currentStep]}</div>\n  //             <div className=\"substatus-text\">Прогресс: {progress}%</div>\n  //         </div>\n  //\n  //         <div className=\"log-section\">\n  //             <div className=\"card\">\n  //                 <button\n  //                     className=\"btn btn--secondary log-toggle\"\n  //                     onClick={() => setShowLogs(!showLogs)}\n  //                 >\n  //                     {showLogs ? 'Скрыть лог анализа' : 'Показать лог анализа'}\n  //                 </button>\n  //\n  //                 {showLogs && (\n  //                     <div className=\"log-viewer\">\n  //                         {logs.map((log, index) => (\n  //                             <div key={index} className=\"log-entry\">\n  //                                 {log}\n  //                             </div>\n  //                         ))}\n  //                         <div ref={logEndRef} />\n  //                     </div>\n  //                 )}\n  //             </div>\n  //         </div>\n  //     </div>\n  // );\n};\n_s(AnalysisView, \"jQLdkxxAXmP9LWyEc5a8XBX0r/g=\", false, function () {\n  return [useMutation];\n});\n_c = AnalysisView;\nexport default AnalysisView;\nvar _c;\n$RefreshReg$(_c, \"AnalysisView\");","map":{"version":3,"names":["React","startManualAnalysis","useQuery","getBaseSettings","useMutation","useQueryClient","jsxDEV","_jsxDEV","useState","useEffect","useRef","analysisLog","AnalysisView","database","onComplete","onCancel","_s","error","setError","manualAnalysis","mutationFn","onError","console","log","onSuccess","mutate","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/GIT/1с-extensions-info/frontend/src/components/AnalysisViewComponent.js"],"sourcesContent":["import React from \"react\";\r\nimport { startManualAnalysis} from \"../services/cron\";\r\nimport {useQuery} from \"@tanstack/react-query\";\r\nimport {getBaseSettings} from \"../services/settingservice\";\r\nimport {useMutation, useQueryClient} from '@tanstack/react-query';\r\n\r\nconst { useState, useEffect, useRef } = React;\r\nconst analysisLog = [\r\n    \"Начало анализа базы данных\",\r\n    \"Подключение к серверу 1С...\",\r\n    \"Подключение установлено успешно\",\r\n    \"Выгрузка конфигурации...\",\r\n    \"Конфигурация выгружена (УТ 11.4.16.242)\",\r\n    \"Поиск установленных расширений...\",\r\n    \"Найдено расширений: 3\",\r\n    \"Анализ расширения: КастомныеДоработки\",\r\n    \"Найдено переопределенных объектов: 5\",\r\n    \"Анализ переопределенных процедур и функций...\",\r\n    \"Найдено переопределенных методов: 6\",\r\n    \"Анализ завершен успешно\"\r\n];\r\n\r\nconst AnalysisView = ({ database, onComplete, onCancel }) => {\r\n    const [error, setError] = useState('');\r\n    const manualAnalysis = useMutation({\r\n        mutationFn: startManualAnalysis,\r\n        onError: (error) => {\r\n            console.log('ERROR:',error)\r\n            setError(error)\r\n        },\r\n        onSuccess: () => {\r\n            setError('')\r\n        },\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        manualAnalysis.mutate();\r\n    }, []); // [] — чтобы вызвалось только один раз при монтировании\r\n\r\n\r\n    if (error) {\r\n        return (\r\n            <div className=\"empty-state\">\r\n                <div className=\"empty-state-icon\">⛔</div>\r\n                <h2>Произошла ошибка</h2>\r\n                <p>{error}</p>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    return null;\r\n\r\n    //\r\n    // const [currentStep, setCurrentStep] = useState(0);\r\n    // const [logs, setLogs] = useState([]);\r\n    // const [showLogs, setShowLogs] = useState(false);\r\n    // const [progress, setProgress] = useState(0);\r\n    // const logEndRef = useRef(null);\r\n    // const steps = [\r\n    //     \"Подключение к серверу 1С...\",\r\n    //     \"Выгрузка конфигурации...\",\r\n    //     \"Анализ расширений...\",\r\n    //     \"Обработка метаданных...\"\r\n    // ];\r\n    //\r\n    //\r\n    // useEffect(() => {\r\n    //     console.log(`Начало анализа базы данных: ${database.Name}`);\r\n    //\r\n    //     const analysisTimer = setTimeout(() => {\r\n    //         let logIndex = 0;\r\n    //         const logInterval = setInterval(() => {\r\n    //             if (logIndex < analysisLog.length) {\r\n    //                 setLogs(prev => [...prev, analysisLog[logIndex]]);\r\n    //                 setProgress(Math.floor((logIndex + 1) / analysisLog.length * 100));\r\n    //                 logIndex++;\r\n    //             } else {\r\n    //                 clearInterval(logInterval);\r\n    //                 console.log(`Анализ завершен для базы: ${database.Name}`);\r\n    //                 setTimeout(() => onComplete(database.ID), 1000);\r\n    //             }\r\n    //         }, 300);\r\n    //\r\n    //         const stepInterval = setInterval(() => {\r\n    //             setCurrentStep(prev => {\r\n    //                 if (prev < steps.length - 1) {\r\n    //                     return prev + 1;\r\n    //                 } else {\r\n    //                     clearInterval(stepInterval);\r\n    //                     return prev;\r\n    //                 }\r\n    //             });\r\n    //         }, 800);\r\n    //\r\n    //         return () => {\r\n    //             clearInterval(logInterval);\r\n    //             clearInterval(stepInterval);\r\n    //         };\r\n    //     }, 500);\r\n    //\r\n    //     return () => clearTimeout(analysisTimer);\r\n    // }, [database.ID]);\r\n    //\r\n    // useEffect(() => {\r\n    //     if (logEndRef.current) {\r\n    //         logEndRef.current.scrollIntoView({ behavior: 'smooth' });\r\n    //     }\r\n    // }, [logs]);\r\n    //\r\n    // return (\r\n    //     <div className=\"analysis-view\">\r\n    //         <div className=\"analysis-status\">\r\n    //             <div className=\"spinner\"></div>\r\n    //             <div className=\"status-text\">Анализ базы: {database.Name}</div>\r\n    //             <div className=\"substatus-text\">{steps[currentStep]}</div>\r\n    //             <div className=\"substatus-text\">Прогресс: {progress}%</div>\r\n    //         </div>\r\n    //\r\n    //         <div className=\"log-section\">\r\n    //             <div className=\"card\">\r\n    //                 <button\r\n    //                     className=\"btn btn--secondary log-toggle\"\r\n    //                     onClick={() => setShowLogs(!showLogs)}\r\n    //                 >\r\n    //                     {showLogs ? 'Скрыть лог анализа' : 'Показать лог анализа'}\r\n    //                 </button>\r\n    //\r\n    //                 {showLogs && (\r\n    //                     <div className=\"log-viewer\">\r\n    //                         {logs.map((log, index) => (\r\n    //                             <div key={index} className=\"log-entry\">\r\n    //                                 {log}\r\n    //                             </div>\r\n    //                         ))}\r\n    //                         <div ref={logEndRef} />\r\n    //                     </div>\r\n    //                 )}\r\n    //             </div>\r\n    //         </div>\r\n    //     </div>\r\n    // );\r\n};\r\n\r\nexport default AnalysisView;"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,mBAAmB,QAAO,kBAAkB;AACrD,SAAQC,QAAQ,QAAO,uBAAuB;AAC9C,SAAQC,eAAe,QAAO,4BAA4B;AAC1D,SAAQC,WAAW,EAAEC,cAAc,QAAO,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElE,MAAM;EAAEC,QAAQ;EAAEC,SAAS;EAAEC;AAAO,CAAC,GAAGV,KAAK;AAC7C,MAAMW,WAAW,GAAG,CAChB,4BAA4B,EAC5B,6BAA6B,EAC7B,iCAAiC,EACjC,0BAA0B,EAC1B,yCAAyC,EACzC,mCAAmC,EACnC,uBAAuB,EACvB,uCAAuC,EACvC,sCAAsC,EACtC,+CAA+C,EAC/C,qCAAqC,EACrC,yBAAyB,CAC5B;AAED,MAAMC,YAAY,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,UAAU;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACzD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMW,cAAc,GAAGf,WAAW,CAAC;IAC/BgB,UAAU,EAAEnB,mBAAmB;IAC/BoB,OAAO,EAAGJ,KAAK,IAAK;MAChBK,OAAO,CAACC,GAAG,CAAC,QAAQ,EAACN,KAAK,CAAC;MAC3BC,QAAQ,CAACD,KAAK,CAAC;IACnB,CAAC;IACDO,SAAS,EAAEA,CAAA,KAAM;MACbN,QAAQ,CAAC,EAAE,CAAC;IAChB;EACJ,CAAC,CAAC;EAGFT,SAAS,CAAC,MAAM;IACZU,cAAc,CAACM,MAAM,CAAC,CAAC;EAC3B,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAGR,IAAIR,KAAK,EAAE;IACP,oBACIV,OAAA;MAAKmB,SAAS,EAAC,aAAa;MAAAC,QAAA,gBACxBpB,OAAA;QAAKmB,SAAS,EAAC,kBAAkB;QAAAC,QAAA,EAAC;MAAC;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACzCxB,OAAA;QAAAoB,QAAA,EAAI;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACzBxB,OAAA;QAAAoB,QAAA,EAAIV;MAAK;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACb,CAAC;EAEd;EAEA,OAAO,IAAI;;EAEX;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACJ,CAAC;AAACf,EAAA,CAxHIJ,YAAY;EAAA,QAESR,WAAW;AAAA;AAAA4B,EAAA,GAFhCpB,YAAY;AA0HlB,eAAeA,YAAY;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}