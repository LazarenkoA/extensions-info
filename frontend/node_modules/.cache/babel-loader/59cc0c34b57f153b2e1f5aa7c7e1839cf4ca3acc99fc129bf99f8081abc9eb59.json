{"ast":null,"code":"var _jsxFileName = \"D:\\\\GIT\\\\1\\u0441-extensions-info\\\\frontend\\\\src\\\\components\\\\CRONSchedule.js\",\n  _s = $RefreshSig$();\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cronPresets = [{\n  \"name\": \"Ежедневно в 2:00\",\n  \"expression\": \"0 2 * * *\"\n}, {\n  \"name\": \"Еженедельно (понедельник)\",\n  \"expression\": \"0 0 * * 1\"\n}, {\n  \"name\": \"Ежемесячно (1 число)\",\n  \"expression\": \"0 0 1 * *\"\n}, {\n  \"name\": \"Каждые 6 часов\",\n  \"expression\": \"0 */6 * * *\"\n}, {\n  \"name\": \"Рабочие дни в 9:00\",\n  \"expression\": \"0 9 * * 1-5\"\n}];\nfunction validateCron(cron) {\n  const parts = cron.trim().split(/\\s+/);\n  if (parts.length !== 5) return false;\n  const ranges = [[0, 59],\n  // minute\n  [0, 23],\n  // hour\n  [1, 31],\n  // day of month\n  [1, 12],\n  // month\n  [0, 6] // day of week\n  ];\n  const validatePart = (part, min, max) => {\n    const elements = part.split(',');\n    for (let el of elements) {\n      el = el.trim();\n      if (el === '*') continue;\n\n      // Шаги вида */n\n      if (/^\\*\\/\\d+$/.test(el)) {\n        continue;\n      }\n\n      // Диапазон или одиночное число\n      const rangeMatch = el.match(/^(\\d+)(-(\\d+))?$/);\n      if (!rangeMatch) return false;\n      const start = parseInt(rangeMatch[1], 10);\n      const end = rangeMatch[3] ? parseInt(rangeMatch[3], 10) : start;\n      if (start < min || end > max || start > end) return false;\n    }\n    return true;\n  };\n  return parts.every((part, i) => validatePart(part, ranges[i][0], ranges[i][1]));\n}\nconst ScheduleEditorModal = ({\n  onClose,\n  database\n}) => {\n  _s();\n  const {\n    useState,\n    useEffect,\n    useRef\n  } = React;\n  const [cronExpression, setCronExpression] = useState((database === null || database === void 0 ? void 0 : database.Cron.Schedule) || '');\n  const [selectedPreset, setSelectedPreset] = useState('');\n  const [validationMessage, setValidationMessage] = useState('');\n  useEffect(() => {\n    if (database) {\n      setAutoAnalysisEnabled(database.autoAnalysisEnabled || false);\n      setCronExpression(database.Cron.Schedule || '');\n    }\n  }, [database]);\n  const validateCronExpression = expression => {\n    if (!expression.trim()) {\n      setValidationMessage('');\n      return false;\n    }\n    const parts = expression.trim().split(/\\s+/);\n    if (!validateCron(expression)) {\n      setValidationMessage('CRON выражение не вальдно');\n      return false;\n    }\n    setValidationMessage('Валидное CRON выражение');\n    return true;\n  };\n  const handleCronChange = value => {\n    setCronExpression(value);\n    validateCronExpression(value);\n    setSelectedPreset('');\n  };\n  const handlePresetSelect = preset => {\n    setCronExpression(preset.expression);\n    setSelectedPreset(preset.expression);\n    validateCronExpression(preset.expression);\n  };\n  const handleSave = () => {\n    const isValid = cronExpression.trim() === '' || validateCronExpression(cronExpression);\n    if (!isValid) {\n      return;\n    }\n    console.log('Сохранение расписания для базы:', database.id, {\n      cronExpression\n    });\n\n    // onSave({\n    //     ...database,\n    //     autoAnalysisEnabled,\n    //     cronSchedule: cronExpression,\n    //     nextRun: autoAnalysisEnabled && cronExpression ? '2024-10-05 02:00:00' : null\n    // });\n\n    onClose();\n  };\n  if (!database) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"modal\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal-content\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"modal-title\",\n          children: \"\\u041D\\u0430\\u0441\\u0442\\u0440\\u043E\\u0439\\u043A\\u0430 \\u0440\\u0430\\u0441\\u043F\\u0438\\u0441\\u0430\\u043D\\u0438\\u044F \\u0430\\u043D\\u0430\\u043B\\u0438\\u0437\\u0430\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"close-btn\",\n          onClick: onClose,\n          children: \"\\xD7\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-body\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"database-info\",\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"\\u0411\\u0430\\u0437\\u0430 \\u0434\\u0430\\u043D\\u043D\\u044B\\u0445:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 123,\n            columnNumber: 25\n          }, this), \" \", database.Name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 122,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"checkbox-group\",\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"checkbox\",\n            id: \"autoAnalysis\"\n            // checked={autoAnalysisEnabled}\n            ,\n            onChange: e => setAutoAnalysisEnabled(e.target.checked)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            htmlFor: \"autoAnalysis\",\n            children: \"\\u0412\\u043A\\u043B\\u044E\\u0447\\u0438\\u0442\\u044C \\u0430\\u0432\\u0442\\u043E\\u043C\\u0430\\u0442\\u0438\\u0447\\u0435\\u0441\\u043A\\u0438\\u0439 \\u0430\\u043D\\u0430\\u043B\\u0438\\u0437\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 21\n        }, this), autoAnalysisEnabled && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"cron-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"form-label\",\n              children: \"CRON \\u0432\\u044B\\u0440\\u0430\\u0436\\u0435\\u043D\\u0438\\u0435\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              className: \"form-control\",\n              value: cronExpression,\n              onChange: e => handleCronChange(e.target.value),\n              placeholder: \"0 2 * * * (\\u0435\\u0436\\u0435\\u0434\\u043D\\u0435\\u0432\\u043D\\u043E \\u0432 2:00)\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 33\n            }, this), validationMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `cron-validation ${validationMessage.includes('Валидное') ? 'valid' : 'invalid'}`,\n              children: validationMessage\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              className: \"form-label\",\n              children: \"\\u0413\\u043E\\u0442\\u043E\\u0432\\u044B\\u0435 \\u0448\\u0430\\u0431\\u043B\\u043E\\u043D\\u044B\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"cron-presets\",\n              children: cronPresets.map((preset, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n                className: `preset-btn ${selectedPreset === preset.expression ? 'selected' : ''}`,\n                onClick: () => handlePresetSelect(preset),\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  children: preset.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 163,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    fontSize: '10px'\n                  },\n                  children: preset.expression\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 164,\n                  columnNumber: 45\n                }, this)]\n              }, index, true, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 41\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-footer\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn--secondary\",\n          onClick: onClose,\n          children: \"\\u041E\\u0442\\u043C\\u0435\\u043D\\u0430\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn btn--primary\",\n          onClick: handleSave,\n          children: \"\\u0421\\u043E\\u0445\\u0440\\u0430\\u043D\\u0438\\u0442\\u044C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 9\n  }, this);\n};\n_s(ScheduleEditorModal, \"r6CT/D//+JitVJ2XV+Z2wKhQsW8=\");\n_c = ScheduleEditorModal;\nexport default ScheduleEditorModal;\nvar _c;\n$RefreshReg$(_c, \"ScheduleEditorModal\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","cronPresets","validateCron","cron","parts","trim","split","length","ranges","validatePart","part","min","max","elements","el","test","rangeMatch","match","start","parseInt","end","every","i","ScheduleEditorModal","onClose","database","_s","useState","useEffect","useRef","cronExpression","setCronExpression","Cron","Schedule","selectedPreset","setSelectedPreset","validationMessage","setValidationMessage","setAutoAnalysisEnabled","autoAnalysisEnabled","validateCronExpression","expression","handleCronChange","value","handlePresetSelect","preset","handleSave","isValid","console","log","id","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","Name","type","onChange","e","target","checked","htmlFor","placeholder","includes","map","index","name","style","fontSize","_c","$RefreshReg$"],"sources":["D:/GIT/1с-extensions-info/frontend/src/components/CRONSchedule.js"],"sourcesContent":["import React from \"react\";\r\n\r\nconst cronPresets = [\r\n    {\"name\": \"Ежедневно в 2:00\", \"expression\": \"0 2 * * *\"},\r\n    {\"name\": \"Еженедельно (понедельник)\", \"expression\": \"0 0 * * 1\"},\r\n    {\"name\": \"Ежемесячно (1 число)\", \"expression\": \"0 0 1 * *\"},\r\n    {\"name\": \"Каждые 6 часов\", \"expression\": \"0 */6 * * *\"},\r\n    {\"name\": \"Рабочие дни в 9:00\", \"expression\": \"0 9 * * 1-5\"}\r\n]\r\n\r\nfunction validateCron(cron) {\r\n    const parts = cron.trim().split(/\\s+/);\r\n    if (parts.length !== 5) return false;\r\n\r\n    const ranges = [\r\n        [0, 59],  // minute\r\n        [0, 23],  // hour\r\n        [1, 31],  // day of month\r\n        [1, 12],  // month\r\n        [0, 6]    // day of week\r\n    ];\r\n\r\n    const validatePart = (part, min, max) => {\r\n        const elements = part.split(',');\r\n        for (let el of elements) {\r\n            el = el.trim();\r\n            if (el === '*') continue;\r\n\r\n            // Шаги вида */n\r\n            if (/^\\*\\/\\d+$/.test(el)) {\r\n                continue;\r\n            }\r\n\r\n            // Диапазон или одиночное число\r\n            const rangeMatch = el.match(/^(\\d+)(-(\\d+))?$/);\r\n            if (!rangeMatch) return false;\r\n\r\n            const start = parseInt(rangeMatch[1], 10);\r\n            const end = rangeMatch[3] ? parseInt(rangeMatch[3], 10) : start;\r\n\r\n            if (start < min || end > max || start > end) return false;\r\n        }\r\n        return true;\r\n    };\r\n\r\n    return parts.every((part, i) => validatePart(part, ranges[i][0], ranges[i][1]));\r\n}\r\n\r\nconst ScheduleEditorModal = ({ onClose, database }) => {\r\n    const {useState, useEffect, useRef} = React;\r\n    const [cronExpression, setCronExpression] = useState(database?.Cron.Schedule  || '');\r\n    const [selectedPreset, setSelectedPreset] = useState('');\r\n    const [validationMessage, setValidationMessage] = useState('');\r\n\r\n    useEffect(() => {\r\n        if (database) {\r\n            setAutoAnalysisEnabled(database.autoAnalysisEnabled || false);\r\n            setCronExpression(database.Cron.Schedule || '');\r\n        }\r\n    }, [database]);\r\n\r\n\r\n    const validateCronExpression = (expression) => {\r\n        if (!expression.trim()) {\r\n            setValidationMessage('');\r\n            return false;\r\n        }\r\n\r\n        const parts = expression.trim().split(/\\s+/);\r\n        if (!validateCron(expression)) {\r\n            setValidationMessage('CRON выражение не вальдно');\r\n            return false;\r\n        }\r\n\r\n        setValidationMessage('Валидное CRON выражение');\r\n        return true;\r\n    };\r\n\r\n    const handleCronChange = (value) => {\r\n        setCronExpression(value);\r\n        validateCronExpression(value);\r\n        setSelectedPreset('');\r\n    };\r\n\r\n    const handlePresetSelect = (preset) => {\r\n        setCronExpression(preset.expression);\r\n        setSelectedPreset(preset.expression);\r\n        validateCronExpression(preset.expression);\r\n    };\r\n\r\n    const handleSave = () => {\r\n        const isValid = cronExpression.trim() === '' || validateCronExpression(cronExpression);\r\n        if (!isValid) {\r\n            return;\r\n        }\r\n\r\n        console.log('Сохранение расписания для базы:', database.id, {\r\n            cronExpression\r\n        });\r\n\r\n        // onSave({\r\n        //     ...database,\r\n        //     autoAnalysisEnabled,\r\n        //     cronSchedule: cronExpression,\r\n        //     nextRun: autoAnalysisEnabled && cronExpression ? '2024-10-05 02:00:00' : null\r\n        // });\r\n\r\n        onClose();\r\n    };\r\n\r\n     if (!database) return null;\r\n\r\n    return (\r\n        <div className=\"modal\">\r\n            <div className=\"modal-content\">\r\n                <div className=\"modal-header\">\r\n                    <h2 className=\"modal-title\">Настройка расписания анализа</h2>\r\n                    <button className=\"close-btn\" onClick={onClose}>×</button>\r\n                </div>\r\n\r\n                <div className=\"modal-body\">\r\n                    <div className=\"database-info\">\r\n                        <strong>База данных:</strong> {database.Name}\r\n                    </div>\r\n\r\n                    <div className=\"checkbox-group\">\r\n                        <input\r\n                            type=\"checkbox\"\r\n                            id=\"autoAnalysis\"\r\n                           // checked={autoAnalysisEnabled}\r\n                            onChange={(e) => setAutoAnalysisEnabled(e.target.checked)}\r\n                        />\r\n                        <label htmlFor=\"autoAnalysis\">Включить автоматический анализ</label>\r\n                    </div>\r\n\r\n                    {autoAnalysisEnabled && (\r\n                        <div className=\"cron-section\">\r\n                            <div className=\"form-group\">\r\n                                <label className=\"form-label\">CRON выражение</label>\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    value={cronExpression}\r\n                                    onChange={(e) => handleCronChange(e.target.value)}\r\n                                    placeholder=\"0 2 * * * (ежедневно в 2:00)\"\r\n                                />\r\n                                {validationMessage && (\r\n                                    <div className={`cron-validation ${validationMessage.includes('Валидное') ? 'valid' : 'invalid'}`}>\r\n                                        {validationMessage}\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n\r\n                            <div className=\"form-group\">\r\n                                <label className=\"form-label\">Готовые шаблоны</label>\r\n                                <div className=\"cron-presets\">\r\n                                    {cronPresets.map((preset, index) => (\r\n                                        <button\r\n                                            key={index}\r\n                                            className={`preset-btn ${selectedPreset === preset.expression ? 'selected' : ''}`}\r\n                                            onClick={() => handlePresetSelect(preset)}\r\n                                        >\r\n                                            <div>{preset.name}</div>\r\n                                            <div style={{ fontSize: '10px' }}>\r\n                                                {preset.expression}\r\n                                            </div>\r\n                                        </button>\r\n                                    ))}\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                </div>\r\n\r\n                <div className=\"modal-footer\">\r\n                    <button className=\"btn btn--secondary\" onClick={onClose}>\r\n                        Отмена\r\n                    </button>\r\n                    <button className=\"btn btn--primary\" onClick={handleSave}>\r\n                        Сохранить\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ScheduleEditorModal;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}