{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api/v1';\n\n// Базовая функция для HTTP запросов\nconst apiRequest = async (endpoint, options = {}) => {\n  const url = `${API_BASE_URL}${endpoint}`;\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n      ...options.headers\n    },\n    ...options\n  };\n  try {\n    const response = await fetch(url, config);\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n    }\n    return await response.json();\n  } catch (error) {\n    console.error('API request failed:', error);\n    throw error;\n  }\n};\n\n// Получить настройки по базам\nexport const getBaseSettings = () => {\n  return apiRequest('/getBaseSettings');\n};\n\n// Добавить новую базу\nexport const addBaseSettings = () => {\n  return apiRequest('/addBaseSettings');\n};\n\n// Удалить базу\nexport const deleteBaseSettings = () => {\n  return apiRequest('/deleteBaseSettings');\n};\n\n// Проверить состояние API\nexport const healthCheck = () => {\n  return apiRequest('/health');\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","apiRequest","endpoint","options","url","config","headers","response","fetch","ok","errorData","json","catch","Error","error","status","console","getBaseSettings","addBaseSettings","deleteBaseSettings","healthCheck"],"sources":["D:/GIT/1с-extensions-info/frontend/src/services/settingservice.js"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8080/api/v1';\n\n// Базовая функция для HTTP запросов\nconst apiRequest = async (endpoint, options = {}) => {\n  const url = `${API_BASE_URL}${endpoint}`;\n\n  const config = {\n    headers: {\n      'Content-Type': 'application/json',\n      ...options.headers,\n    },\n    ...options,\n  };\n\n  try {\n    const response = await fetch(url, config);\n\n    if (!response.ok) {\n      const errorData = await response.json().catch(() => ({}));\n      throw new Error(errorData.error || `HTTP error! status: ${response.status}`);\n    }\n\n    return await response.json();\n  } catch (error) {\n    console.error('API request failed:', error);\n    throw error;\n  }\n};\n\n// Получить настройки по базам\nexport const getBaseSettings = () => {\n  return apiRequest('/getBaseSettings');\n};\n\n// Добавить новую базу\nexport const addBaseSettings = () => {\n  return apiRequest('/addBaseSettings');\n};\n\n// Удалить базу\nexport const deleteBaseSettings = () => {\n  return apiRequest('/deleteBaseSettings');\n};\n\n// Проверить состояние API\nexport const healthCheck = () => {\n  return apiRequest('/health');\n};\n"],"mappings":"AAAA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,8BAA8B;;AAEpF;AACA,MAAMC,UAAU,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EACnD,MAAMC,GAAG,GAAG,GAAGP,YAAY,GAAGK,QAAQ,EAAE;EAExC,MAAMG,MAAM,GAAG;IACbC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,GAAGH,OAAO,CAACG;IACb,CAAC;IACD,GAAGH;EACL,CAAC;EAED,IAAI;IACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAACJ,GAAG,EAAEC,MAAM,CAAC;IAEzC,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAMC,SAAS,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;MACzD,MAAM,IAAIC,KAAK,CAACH,SAAS,CAACI,KAAK,IAAI,uBAAuBP,QAAQ,CAACQ,MAAM,EAAE,CAAC;IAC9E;IAEA,OAAO,MAAMR,QAAQ,CAACI,IAAI,CAAC,CAAC;EAC9B,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdE,OAAO,CAACF,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;IAC3C,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMG,eAAe,GAAGA,CAAA,KAAM;EACnC,OAAOhB,UAAU,CAAC,kBAAkB,CAAC;AACvC,CAAC;;AAED;AACA,OAAO,MAAMiB,eAAe,GAAGA,CAAA,KAAM;EACnC,OAAOjB,UAAU,CAAC,kBAAkB,CAAC;AACvC,CAAC;;AAED;AACA,OAAO,MAAMkB,kBAAkB,GAAGA,CAAA,KAAM;EACtC,OAAOlB,UAAU,CAAC,qBAAqB,CAAC;AAC1C,CAAC;;AAED;AACA,OAAO,MAAMmB,WAAW,GAAGA,CAAA,KAAM;EAC/B,OAAOnB,UAAU,CAAC,SAAS,CAAC;AAC9B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}